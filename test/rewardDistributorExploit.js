const { ethers, network, upgrades } = require("hardhat");
const { expect } = require("chai");
const { duration, increase } = require("./utilities/time");

const UNITROLLER_ARTIFACT = require("../deployments/avalanche/Unitroller.json");
const JOELENS_ARTIFACT = require("../deployments/avalanche/JoeLens.json");
const OLD_REWARD_DISTRIBUTOR_ARTIFACT = require("../deployments/avalanche/versions/RewardDistributorV3.json");
const JAVAX_ARTIFACT = require("../artifacts/contracts/JWrappedNativeDelegate.sol/JWrappedNativeDelegate.json");

const MULTISIG_ADDRESS = "0x3876183b75916e20d2ADAB202D1A3F9e9bf320ad";
const DEV_ADDRESS = "0xD858eBAa943b4C2fb06BA0Ba8920A132fd2410eE";
const JOE_ADDRESS = "0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd";
const JAVAX_ADDRESS = "0xC22F01ddc8010Ee05574028528614634684EC29e";

let rewardedJoe;

describe("RewardDistributor Exploit", function () {
  before(async function () {
    // Accounts
    this.signers = await ethers.getSigners();
    this.alice = this.signers[0];
    this.bob = this.signers[1];

    // ABIs
    this.JoetrollerCF = await ethers.getContractFactory("Joetroller");
    this.JoeLensCF = await ethers.getContractFactory("JoeLens");
    this.RewardDistributorCFOld = await ethers.getContractFactory(
      OLD_REWARD_DISTRIBUTOR_ARTIFACT.abi,
      OLD_REWARD_DISTRIBUTOR_ARTIFACT.bytecode
    );
    this.JoeCF = await ethers.getContractFactory("JErc20");

    // Contracts
    await network.provider.send("hardhat_setCode", [
      JAVAX_ADDRESS,
      JAVAX_ARTIFACT.deployedBytecode,
    ]);

    this.jAvax = await ethers.getContractAt(
      "JWrappedNativeDelegate",
      JAVAX_ADDRESS
    );
    this.joetroller = await this.JoetrollerCF.attach(
      UNITROLLER_ARTIFACT.address
    );
    this.joeLens = await this.JoeLensCF.attach(JOELENS_ARTIFACT.address);
    this.rewardDistributorOld = await this.RewardDistributorCFOld.attach(
      OLD_REWARD_DISTRIBUTOR_ARTIFACT.address
    );
    this.joe = await this.JoeCF.attach(JOE_ADDRESS);
  });

  beforeEach(async function () {
    // We reset the state before each tests
    await network.provider.request({
      method: "hardhat_reset",
      params: [
        {
          forking: {
            jsonRpcUrl: "https://api.avax.network/ext/bc/C/rpc",
            blockNumber: 12947847,
          },
          live: false,
          saveDeployments: false,
          tags: ["test", "local"],
        },
      ],
    });
    // Impersonate Timelock address, which is the owner of lending contracts
    await network.provider.request({
      method: "hardhat_impersonateAccount",
      params: [MULTISIG_ADDRESS],
    });
    this.admin = await ethers.getSigner(MULTISIG_ADDRESS);
    // Fund admin with AVAX
    await this.alice.sendTransaction({
      to: this.admin.address,
      value: ethers.utils.parseEther("10"),
    });

    // Impersonate Dev address, which is the owner of old RewardDistributor
    await network.provider.request({
      method: "hardhat_impersonateAccount",
      params: [DEV_ADDRESS],
    });
    this.dev = await ethers.getSigner(DEV_ADDRESS);

    // Fund dev with AVAX
    await this.alice.sendTransaction({
      to: this.dev.address,
      value: ethers.utils.parseEther("10"),
    });

    await this.joe.connect(this.dev).transfer(
      this.rewardDistributorOld.address,
      ethers.utils.parseEther("1000000") // 1 million JOE
    );
  });

  it("Exploit doesn't work", async function () {
    await this.jAvax
      .connect(this.alice)
      .mintNative({ value: ethers.utils.parseEther("1") });

    const rewardsAtT0 = await this.joeLens.callStatic[
      "getClaimableRewards(uint8,address,address,address)"
    ](0, this.joetroller.address, this.joe.address, this.alice.address);
    expect(rewardsAtT0).to.be.equal("0");

    await increase(duration.days(30));

    const rewardsAtD30 = await this.joeLens.callStatic[
      "getClaimableRewards(uint8,address,address,address)"
    ](0, this.joetroller.address, this.joe.address, this.alice.address);
    expect(rewardsAtD30).to.be.above("0");

    await this.jAvax
      .connect(this.bob)
      .mintNative({ value: ethers.utils.parseEther("1000") });

    // Bob sends JAvax to Alice to try to increase her rewards
    await this.jAvax
      .connect(this.bob)
      .transfer(
        this.alice.address,
        await this.jAvax.balanceOf(this.bob.address)
      );

    const rewardsAtD30AfterTransfer = await this.joeLens.callStatic[
      "getClaimableRewards(uint8,address,address,address)"
    ](0, this.joetroller.address, this.joe.address, this.alice.address);
    expect(rewardsAtD30AfterTransfer).to.be.closeTo(
      rewardsAtD30,
      ethers.utils.parseEther("0.0001")
    );

    await increase(duration.days(30));

    const rewardsAtD60 = await this.joeLens.callStatic[
      "getClaimableRewards(uint8,address,address,address)"
    ](0, this.joetroller.address, this.joe.address, this.alice.address);
    expect(rewardsAtD60).to.be.closeTo(
      rewardsAtD30.mul("1000"),
      rewardsAtD30 // 0.01%
    );
  });

  after(async function () {
    await network.provider.request({
      method: "hardhat_reset",
      params: [],
    });
  });
});
